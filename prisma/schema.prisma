// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN_USER
  BASIC_USER
}

enum Type {
  multiple
  boolean
}

enum Difficulty {
  easy
  medium
  hard
}

model User {
  id                     Int                   @id @default(autoincrement())
  firstName              String
  lastName               String
  username               String
  email                  String                @unique
  profilePicture         String
  password               String
  role                   Role                  @default(BASIC_USER)
  createdAt              DateTime              @default(now())
  userQuestionAnswers    UserQuestionAnswer[]
  userQuizScores         UserQuizScore[]
}
model Category {
  id        Int      @id 
  name      String   @unique
  createdAt DateTime @default(now())
  quizzes   Quiz[]
}
model Question {
  id                  Int                  @id @default(autoincrement())
  quizId              Int?
  question            String
  correctAnswer       String
  incorrectAnswers    String[]
  createdAt           DateTime             @default(now())
  userQuestionAnswers UserQuestionAnswer[]
  quiz                Quiz?                @relation(fields: [quizId], references: [id], onDelete: Cascade)
}
model Quiz {
  id                     Int                   @id @default(autoincrement())
  name                   String
  categoryId             Int
  type                   Type
  difficulty             Difficulty
  startDate              String
  endDate                String
  createdAt              DateTime              @default(now())
  questions              Question[]
  userQuestionAnswers    UserQuestionAnswer[]
  userQuizScores         UserQuizScore[]
  category               Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}
model UserQuestionAnswer {
  id         Int      @id @default(autoincrement())
  userId     Int
  quizId     Int
  questionId Int
  answer     String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
model UserQuizScore {
  id        Int      @id @default(autoincrement())
  userId    Int
  quizId    Int
  score     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}